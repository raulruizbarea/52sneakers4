this.usersService.findUserByEmail(formValue.email).pipe(
  tap(console.log))
  .subscribe(
    user => {
      this.user = user;
      if (this.user !== undefined) {
        this.doLogin();
      } else {
        this.presentAlert();
        this.form.controls['password'].reset();
      }
    },
    err => console.log(`Error finding user ${err}`));


     this.allNews = news.sort((a, b) => a.title.localeCompare(b.title));


     =====

     this.sneakerService.findAllSneakersWithLike(this.afAuth.auth.currentUser.uid).subscribe(
      values => console.log(values)
    );

     findAllSneakersWithLike(userKey: string): Observable<Sneaker[]> {
    return this.db.list('sneakers').snapshotChanges().pipe(
      tap(console.log),
      map(changes => {
        return changes.map(c => ({$key: c.payload.key, ...c.payload.val()})); } ),
      map(changes => changes.forEach(sneaker => {
        console.log('Sneaker: ' + sneaker);
        this.db.object('usersPerSneaker/' + sneaker.$key + '/' + userKey + '/likedDate')
          .snapshotChanges()
            .subscribe(action => {
            // console.log(action.type);
            // console.log(action.key);
            // console.log(action.payload.val());
            if (action.key) {
              sneaker.like = true;
            } else {
              sneaker.like = false;
            }
          });
        console.log(changes);
      }),
      ),
    );
  }


   /* findSneakerByKey(key: string): Observable<{}> {
    const subject = new Subject();

    this.db.list('sneakers', ref => ref.orderByKey().equalTo(key)).snapshotChanges().pipe(
      // map(changes => changes[0]),
      tap(console.log),
      // filter(changes => changes && changes.length > 0),
      map(changes => {
        return changes.map(c => ({$key: c.payload.key, ...c.payload.val()})); } ),
      map(changes => changes[0])
    ).subscribe(values => {
      subject.next(values);
      subject.complete();
    }, err => {
        subject.error(err);
        subject.complete();
    });

    return subject.asObservable();
  } */


  findAllSneakers(): Observable<Sneaker[]> {
    return this.db.list('sneakers').snapshotChanges().pipe(
      tap(console.log),
      map(changes => {
        return changes.map(c => ({$key: c.payload.key, ...c.payload.val()})); } ),
      map(Sneaker.fromJsonList)
    );
  }

  isLike(sneakerKey: string, userKey: string): Observable<any> {
    const subject = new Subject();
    let exists = false;
    this.db.object('usersPerSneaker/' + sneakerKey + '/' + userKey + '/likedDate')
          .snapshotChanges()
            .subscribe(action => {
            // console.log(action.type);
            // console.log(action.key);
            // console.log(action.payload.val());
            if (action.key) {
              exists = true;
            }
            subject.next(exists);
            subject.complete();
          }, err => {
            subject.error(err);
            subject.complete();
        });
      return subject.asObservable();
  }


  // TODO 
  // brew install gradle
  // ionic cordova build android


// export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk

# avdmanager, sdkmanager
export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin

# adb, logcat
export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools

# emulator
export PATH=$PATH:$ANDROID_SDK_ROOT/emulator
For apksigner and zipalign, $ANDROID_SDK_ROOT/build-tools/<version> must also be added to PATH.

// adb devices

//https://gradle.org/install/
  // brew install gradle



  // ionic cordova build android --prod --release


https://beta.ionicframework.com/docs/publishing/play-store
  //  keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000

// copy the keystore version

//  jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore HelloWorld-release-unsigned.apk alias_name

//  zipalign -v 4 HelloWorld-release-unsigned.apk HelloWorld.apk
// Making a developer account with Google Play costs $25 USD.